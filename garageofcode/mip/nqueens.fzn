predicate all_different_int(array [int] of var int: x);
var 1..4: X_INTRODUCED_0_;
var 1..4: X_INTRODUCED_1_;
var 1..4: X_INTRODUCED_2_;
var 1..4: X_INTRODUCED_3_;
var 2..5: X_INTRODUCED_5_ ::var_is_introduced :: is_defined_var;
var 3..6: X_INTRODUCED_6_ ::var_is_introduced :: is_defined_var;
var 4..7: X_INTRODUCED_7_ ::var_is_introduced :: is_defined_var;
var 5..8: X_INTRODUCED_8_ ::var_is_introduced :: is_defined_var;
var 0..3: X_INTRODUCED_10_ ::var_is_introduced :: is_defined_var;
var -1..2: X_INTRODUCED_11_ ::var_is_introduced :: is_defined_var;
var -2..1: X_INTRODUCED_12_ ::var_is_introduced :: is_defined_var;
var -3..0: X_INTRODUCED_13_ ::var_is_introduced :: is_defined_var;
array [1..4] of var int: q:: output_array([1..4]) = [X_INTRODUCED_0_,X_INTRODUCED_1_,X_INTRODUCED_2_,X_INTRODUCED_3_];
array [1..4] of var int: X_INTRODUCED_9_ ::var_is_introduced  = [X_INTRODUCED_5_,X_INTRODUCED_6_,X_INTRODUCED_7_,X_INTRODUCED_8_];
array [1..4] of var int: X_INTRODUCED_14_ ::var_is_introduced  = [X_INTRODUCED_10_,X_INTRODUCED_11_,X_INTRODUCED_12_,X_INTRODUCED_13_];
constraint all_different_int(q);
constraint all_different_int(X_INTRODUCED_9_);
constraint all_different_int(X_INTRODUCED_14_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_0_,X_INTRODUCED_5_],-1):: defines_var(X_INTRODUCED_5_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1_,X_INTRODUCED_6_],-2):: defines_var(X_INTRODUCED_6_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2_,X_INTRODUCED_7_],-3):: defines_var(X_INTRODUCED_7_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3_,X_INTRODUCED_8_],-4):: defines_var(X_INTRODUCED_8_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_0_,X_INTRODUCED_10_],1):: defines_var(X_INTRODUCED_10_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_1_,X_INTRODUCED_11_],2):: defines_var(X_INTRODUCED_11_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_2_,X_INTRODUCED_12_],3):: defines_var(X_INTRODUCED_12_);
constraint int_lin_eq([1,-1],[X_INTRODUCED_3_,X_INTRODUCED_13_],4):: defines_var(X_INTRODUCED_13_);
solve  satisfy;
